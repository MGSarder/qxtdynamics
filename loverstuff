<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>Photo Wall â€” Pink & Cute</title>
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600;700&display=swap" rel="stylesheet">
  <style>
    :root{
      --bg:#fff0f6; /* soft pink */
      --card:#ffffff;
      --muted:#b86b87;
      --accent:#ff6bcb; /* bright pink */
      --accent-2:#ff9ad5; /* lighter pink */
      --shadow: 0 10px 30px rgba(255,105,180,0.08);
      --max-width:980px;
      font-family: 'Poppins', system-ui, -apple-system, "Segoe UI", Roboto, Arial;
    }
    *{box-sizing:border-box}
    body{margin:0;background:linear-gradient(180deg,var(--bg),#ffeef8 60%);color:#2b1330;display:flex;justify-content:center;padding:36px}
    .wrap{width:100%;max-width:var(--max-width)}

    header{display:flex;flex-direction:column;align-items:center;margin-bottom:18px}
    header h1{margin:6px 0 2px;font-size:26px;letter-spacing:0.4px}
    header p{margin:0;color:var(--muted);font-size:14px}

    .uploader{background:linear-gradient(180deg,var(--card),#fff);padding:18px;border-radius:20px;box-shadow:var(--shadow);display:flex;gap:14px;align-items:center;border:1px solid rgba(255,140,190,0.18)}
    .uploader .left{flex:1}
    .filewrap{display:flex;gap:12px;align-items:center}
    .filebtn{display:inline-flex;align-items:center;gap:8px;padding:10px 14px;border-radius:12px;background:linear-gradient(90deg,var(--accent),var(--accent-2));color:#fff;border:0;cursor:pointer;font-weight:600;box-shadow:0 6px 18px rgba(255,105,180,0.14)}
    .uploader input[type="file"]{display:none}
    .uploader input[type="text"]{width:100%;padding:12px;border-radius:12px;border:1px solid #ffd6ec;background:#fff8fb}
    .note{font-size:12px;color:var(--muted);margin-top:8px}

    .grid{display:grid;grid-template-columns:repeat(auto-fill,minmax(260px,1fr));gap:18px;margin-top:22px}
    .card{background:var(--card);border-radius:18px;overflow:hidden;box-shadow:var(--shadow);display:flex;flex-direction:column;border:1px solid rgba(255,140,190,0.08)}
    .imgwrap{position:relative}
    .card img{width:100%;height:auto;display:block;object-fit:cover}
    .heart{position:absolute;right:12px;top:12px;background:rgba(255,255,255,0.9);padding:8px;border-radius:999px;box-shadow:0 6px 18px rgba(255,105,180,0.08);cursor:pointer}
    .meta{padding:12px}
    .caption{margin:0 0 8px;font-weight:700;color:#3a0f2e}
    .time{font-size:12px;color:var(--muted);margin-bottom:8px}
    .comments{border-top:1px solid #fff0f4;padding:12px;background:linear-gradient(180deg,rgba(255,250,253,0.7),transparent)}
    .comment{font-size:13px;padding:8px 0;border-bottom:1px dashed rgba(255,180,210,0.25)}
    .comment:last-child{border-bottom:0}
    .comment small{display:block;color:var(--muted);font-size:11px}
    .comment-form{display:flex;gap:8px;margin-top:10px}
    .comment-form input{flex:1;padding:10px;border-radius:12px;border:1px solid #ffd6ec;background:#fff8fb}
    .comment-form button{padding:10px 14px;border-radius:12px;border:0;background:linear-gradient(90deg,var(--accent),var(--accent-2));color:#fff;cursor:pointer}

    .controls{display:flex;gap:8px;margin-top:8px}
    .btn-ghost{background:transparent;border:1px dashed rgba(255,140,190,0.25);padding:8px;border-radius:10px;cursor:pointer;color:#7a3750}

    footer{margin-top:18px;text-align:center;color:var(--muted);font-size:13px}

    /* Hover effects */
    .card:hover{transform:translateY(-6px);transition:transform 220ms ease}
    .filebtn:active{transform:translateY(1px)}

    /* Mobile */
    @media (max-width:480px){body{padding:18px}.uploader{flex-direction:column;align-items:stretch}}
  </style>
</head>
<body>
  <div class="wrap">
    <header>
      <h1>â™¡ Photo Wall â€” Pink & Cute â™¡</h1>
      <p>Upload your sweetest moments, caption them, and let visitors leave cute comments â€” no login required.</p>
    </header>

    <section class="uploader" aria-label="uploader">
      <div class="left">
        <div class="filewrap">
          <label class="filebtn" for="file">ðŸŒ¸ Choose Photo</label>
          <input id="file" type="file" accept="image/*">
          <input id="caption" type="text" placeholder="Add a caption (optional)">
        </div>
        <div class="note">Images are resized in the browser to keep things snappy. Saved to your browser's storage.</div>
      </div>

      <div style="display:flex;flex-direction:column;gap:8px">
        <button id="postBtn" class="filebtn">Post â™¥</button>
        <button id="exportBtn" class="btn-ghost">Export JSON</button>
        <label class="btn-ghost" style="text-align:center;padding:8px;border-radius:8px;cursor:pointer">
          Import
          <input id="importFile" type="file" accept="application/json" style="display:none">
        </label>
      </div>
    </section>

    <main id="feed" class="grid" aria-live="polite"></main>

    <footer>To host on GitHub Pages: save this file as <code>index.html</code> and enable Pages in your repo settings.</footer>
  </div>

  <script>
    // Functionality unchanged â€” just UI refreshed to pink & cute.
    const STORAGE_KEY = 'photo_wall_posts_v1';
    const fileInput = document.getElementById('file');
    const captionInput = document.getElementById('caption');
    const postBtn = document.getElementById('postBtn');
    const feed = document.getElementById('feed');
    const exportBtn = document.getElementById('exportBtn');
    const importFile = document.getElementById('importFile');

    // make the custom file button open the hidden input
    document.querySelector('.filebtn[for="file"]')?.addEventListener('click', ()=> fileInput.click());

    function loadPosts(){
      try{ const raw = localStorage.getItem(STORAGE_KEY); return raw ? JSON.parse(raw) : [];}catch(e){console.error(e); return []}
    }
    function savePosts(posts){localStorage.setItem(STORAGE_KEY, JSON.stringify(posts))}

    function readAndResize(file, maxWidth=1200){
      return new Promise((resolve,reject)=>{
        const img = new Image();
        const reader = new FileReader();
        reader.onerror = reject;
        reader.onload = e => {
          img.onload = () => {
            const scale = Math.min(1, maxWidth / img.width);
            const w = Math.round(img.width * scale);
            const h = Math.round(img.height * scale);
            const c = document.createElement('canvas');
            c.width = w; c.height = h;
            const ctx = c.getContext('2d');
            ctx.drawImage(img,0,0,w,h);
            const dataUrl = c.toDataURL('image/jpeg', 0.85);
            resolve(dataUrl);
          }
          img.onerror = reject;
          img.src = e.target.result;
        }
        reader.readAsDataURL(file);
      })
    }

    function render(){
      const posts = loadPosts();
      feed.innerHTML = '';
      posts.slice().reverse().forEach(post => {
        const card = document.createElement('article');
        card.className = 'card';
        card.innerHTML = `
          <div class="imgwrap">
            <img src="${post.dataUrl}" alt="user upload">
            <div class="heart" title="cute">â™¥</div>
          </div>
          <div class="meta">
            <p class="caption">${escapeHtml(post.caption || '')}</p>
            <div class="time">Posted: ${new Date(post.createdAt).toLocaleString()}</div>
            <div class="controls">
              <button class="btn-ghost" data-action="download">Download</button>
              <button class="btn-ghost" data-action="delete">Delete</button>
            </div>
          </div>
          <div class="comments">
            <div class="comments-list">
              ${post.comments.map(c=>`<div class="comment"><strong>${escapeHtml(c.text)}</strong><small>${new Date(c.createdAt).toLocaleString()}</small></div>`).join('')}
            </div>
            <form class="comment-form">
              <input placeholder="Write a cute comment..." required>
              <button type="submit">Comment</button>
            </form>
          </div>
        `;

        const downloadBtn = card.querySelector('[data-action="download"]');
        downloadBtn.addEventListener('click', ()=>{
          const a = document.createElement('a'); a.href = post.dataUrl; a.download = `photo-${post.id}.jpg`; document.body.appendChild(a); a.click(); a.remove();
        });
        const deleteBtn = card.querySelector('[data-action="delete"]');
        deleteBtn.addEventListener('click', ()=>{
          if(!confirm('Delete this post?')) return;
          const all = loadPosts();
          const idx = all.findIndex(p=>p.id===post.id);
          if(idx>-1){ all.splice(idx,1); savePosts(all); render(); }
        });

        const commentForm = card.querySelector('.comment-form');
        commentForm.addEventListener('submit', e=>{
          e.preventDefault();
          const input = commentForm.querySelector('input');
          const text = input.value.trim();
          if(!text) return;
          const all = loadPosts();
          const p = all.find(pp=>pp.id===post.id);
          if(!p) return;
          p.comments = p.comments || [];
          p.comments.push({text, createdAt: new Date().toISOString()});
          savePosts(all);
          input.value = '';
          render();
        });

        feed.appendChild(card);
      })
      if(posts.length===0){
        feed.innerHTML = '<div style="grid-column:1/-1;text-align:center;color:var(--muted);padding:30px;background:transparent">No posts yet â€” be the first to brighten the wall! ðŸŒ¸</div>'
      }
    }

    postBtn.addEventListener('click', async ()=>{
      const file = fileInput.files[0];
      if(!file){alert('Please choose an image file.');return}
      postBtn.disabled = true; postBtn.textContent = 'Posting...';
      try{
        const dataUrl = await readAndResize(file, 1200);
        const posts = loadPosts();
        const post = {id: String(Date.now()) + Math.random().toString(36).slice(2,8), dataUrl, caption: captionInput.value.trim(), comments: [], createdAt: new Date().toISOString()};
        posts.push(post);
        savePosts(posts);
        fileInput.value = '';
        captionInput.value = '';
        render();
      }catch(err){console.error(err); alert('Failed to read image.')}
      finally{postBtn.disabled = false; postBtn.textContent = 'Post â™¥'}
    });

    exportBtn.addEventListener('click', ()=>{
      const posts = loadPosts();
      const blob = new Blob([JSON.stringify(posts, null, 2)], {type:'application/json'});
      const a = document.createElement('a');
      a.href = URL.createObjectURL(blob);
      a.download = 'photo_wall_export.json';
      document.body.appendChild(a); a.click(); a.remove();
    });
    importFile.addEventListener('change', async (e)=>{
      const f = e.target.files[0];
      if(!f) return;
      try{
        const txt = await f.text();
        const parsed = JSON.parse(txt);
        if(!Array.isArray(parsed)) throw new Error('Invalid format');
        for(const p of parsed){ if(!p.id||!p.dataUrl) throw new Error('Missing fields'); }
        savePosts(parsed);
        render();
        alert('Imported posts (replaced current data).');
      }catch(err){alert('Import failed: '+err.message)}
      finally{importFile.value=''}
    });

    function escapeHtml(s){ return (s||'').replace(/[&<>\"]/g, c=>({ '&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;' }[c])); }

    render();
  </script>
</body>
</html>
